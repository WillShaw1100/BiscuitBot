"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PacketDecoder = void 0;
const stream_1 = require("stream");
const varint_1 = require("varint");
var PackageType;
(function (PackageType) {
    PackageType[PackageType["HANDSHAKE"] = 0] = "HANDSHAKE";
    PackageType[PackageType["PING"] = 1] = "PING";
})(PackageType || (PackageType = {}));
class PacketDecoder extends stream_1.Writable {
    constructor(options) {
        super(options);
        this.buffer = Buffer.alloc(0);
    }
    oncePromise(event) {
        return new Promise((resolve) => {
            this.once(event, resolve);
        });
    }
    async _write(chunk, encoding, callback) {
        const { getPayload, decodeHandshake, decodePong } = this;
        if (!this.packetInfo) {
            this.packetInfo = this.decodeHeader(chunk);
        }
        this.buffer = Buffer.concat([this.buffer, chunk]);
        if (this.packetInfo) {
            if (this.buffer.length < this.packetInfo.length) {
                // do we still need to read more?
                return callback();
            }
            if (this.buffer.length > this.packetInfo.length) {
                throw new Error('we did overrun expected data size!');
            }
        }
        try {
            if (this.packetInfo) {
                switch (this.packetInfo.id) {
                    case PackageType.HANDSHAKE: {
                        this.emit('handshake', decodeHandshake(getPayload(this.packetInfo, this.buffer)));
                        break;
                    }
                    case PackageType.PING: {
                        this.emit('pong', decodePong(getPayload(this.packetInfo, this.buffer)));
                        break;
                    }
                    default:
                        this.emit('error', new Error('Unknown packet id: ' + this.packetInfo.id));
                }
            }
            this.buffer = Buffer.alloc(0);
            this.packetInfo = undefined;
        }
        catch (err) {
            this.emit('error', err);
        }
        callback();
    }
    decodeHeader(buffer) {
        const length = (0, varint_1.decode)(buffer);
        return {
            id: buffer.readUInt8((0, varint_1.encodingLength)(length)),
            length: length + (0, varint_1.encodingLength)(length),
            offset: (0, varint_1.encodingLength)(length) + 1,
        };
    }
    getPayload(header, data) {
        return data.slice(header.offset, data.length);
    }
    decodeHandshake(buffer) {
        const length = (0, varint_1.decode)(buffer);
        const data = buffer.slice((0, varint_1.encodingLength)(length), (0, varint_1.encodingLength)(length) + length);
        return JSON.parse(data.toString());
    }
    decodePong(data) {
        const pongData = data.readBigUInt64BE(0);
        return Number(BigInt(Date.now()) - pongData);
    }
}
exports.PacketDecoder = PacketDecoder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFja2V0RGVjb2Rlci5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbIlBhY2tldERlY29kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQTBDO0FBQzFDLG1DQUE4QztBQUU5QyxJQUFLLFdBR0o7QUFIRCxXQUFLLFdBQVc7SUFDZix1REFBYSxDQUFBO0lBQ2IsNkNBQVEsQ0FBQTtBQUNULENBQUMsRUFISSxXQUFXLEtBQVgsV0FBVyxRQUdmO0FBUUQsTUFBYSxhQUFjLFNBQVEsaUJBQVE7SUFJMUMsWUFBWSxPQUE4QztRQUN6RCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLFdBQVcsQ0FBb0IsS0FBYTtRQUNsRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFhLEVBQUUsUUFBYSxFQUFFLFFBQW9CO1FBQ3JFLE1BQU0sRUFBQyxVQUFVLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBQyxHQUFHLElBQUksQ0FBQztRQUN2RCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0M7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFbEQsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FB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b250ZW50IjpbImltcG9ydCBpbnRlcm5hbCwge1dyaXRhYmxlfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHtkZWNvZGUsIGVuY29kaW5nTGVuZ3RofSBmcm9tICd2YXJpbnQnO1xuXG5lbnVtIFBhY2thZ2VUeXBlIHtcblx0SEFORFNIQUtFID0gMCxcblx0UElORyA9IDEsXG59XG5cbmludGVyZmFjZSBJSGVhZGVyIHtcblx0aWQ6IFBhY2thZ2VUeXBlO1xuXHRsZW5ndGg6IG51bWJlcjtcblx0b2Zmc2V0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBQYWNrZXREZWNvZGVyIGV4dGVuZHMgV3JpdGFibGUge1xuXHRwcml2YXRlIHBhY2tldEluZm86IElIZWFkZXIgfCB1bmRlZmluZWQ7XG5cdHByaXZhdGUgYnVmZmVyOiBCdWZmZXI7XG5cblx0Y29uc3RydWN0b3Iob3B0aW9ucz86IGludGVybmFsLldyaXRhYmxlT3B0aW9ucyB8IHVuZGVmaW5lZCkge1xuXHRcdHN1cGVyKG9wdGlvbnMpO1xuXHRcdHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jKDApO1xuXHR9XG5cblx0cHVibGljIG9uY2VQcm9taXNlPFQgZXh0ZW5kcyB1bmtub3duPihldmVudDogc3RyaW5nKTogUHJvbWlzZTxUPiB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cdFx0XHR0aGlzLm9uY2UoZXZlbnQsIHJlc29sdmUpO1xuXHRcdH0pO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIF93cml0ZShjaHVuazogQnVmZmVyLCBlbmNvZGluZzogYW55LCBjYWxsYmFjazogKCkgPT4gdm9pZCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IHtnZXRQYXlsb2FkLCBkZWNvZGVIYW5kc2hha2UsIGRlY29kZVBvbmd9ID0gdGhpcztcblx0XHRpZiAoIXRoaXMucGFja2V0SW5mbykge1xuXHRcdFx0dGhpcy5wYWNrZXRJbmZvID0gdGhpcy5kZWNvZGVIZWFkZXIoY2h1bmspO1xuXHRcdH1cblx0XHR0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuYnVmZmVyLCBjaHVua10pO1xuXG5cdFx0aWYgKHRoaXMucGFja2V0SW5mbykge1xuXHRcdFx0aWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8IHRoaXMucGFja2V0SW5mby5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gZG8gd2Ugc3RpbGwgbmVlZCB0byByZWFkIG1vcmU/XG5cdFx0XHRcdHJldHVybiBjYWxsYmFjaygpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA+IHRoaXMucGFja2V0SW5mby5sZW5ndGgpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCd3ZSBkaWQgb3ZlcnJ1biBleHBlY3RlZCBkYXRhIHNpemUhJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRpZiAodGhpcy5wYWNrZXRJbmZvKSB7XG5cdFx0XHRcdHN3aXRjaCAodGhpcy5wYWNrZXRJbmZvLmlkKSB7XG5cdFx0XHRcdFx0Y2FzZSBQYWNrYWdlVHlwZS5IQU5EU0hBS0U6IHtcblx0XHRcdFx0XHRcdHRoaXMuZW1pdCgnaGFuZHNoYWtlJywgZGVjb2RlSGFuZHNoYWtlKGdldFBheWxvYWQodGhpcy5wYWNrZXRJbmZvLCB0aGlzLmJ1ZmZlcikpKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXNlIFBhY2thZ2VUeXBlLlBJTkc6IHtcblx0XHRcdFx0XHRcdHRoaXMuZW1pdCgncG9uZycsIGRlY29kZVBvbmcoZ2V0UGF5bG9hZCh0aGlzLnBhY2tldEluZm8sIHRoaXMuYnVmZmVyKSkpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHR0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdVbmtub3duIHBhY2tldCBpZDogJyArIHRoaXMucGFja2V0SW5mby5pZCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvYygwKTtcblx0XHRcdHRoaXMucGFja2V0SW5mbyA9IHVuZGVmaW5lZDtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuXHRcdH1cblx0XHRjYWxsYmFjaygpO1xuXHR9XG5cblx0cHJpdmF0ZSBkZWNvZGVIZWFkZXIoYnVmZmVyOiBCdWZmZXIpOiBJSGVhZGVyIHtcblx0XHRjb25zdCBsZW5ndGggPSBkZWNvZGUoYnVmZmVyKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aWQ6IGJ1ZmZlci5yZWFkVUludDgoZW5jb2RpbmdMZW5ndGgobGVuZ3RoKSksXG5cdFx0XHRsZW5ndGg6IGxlbmd0aCArIGVuY29kaW5nTGVuZ3RoKGxlbmd0aCksXG5cdFx0XHRvZmZzZXQ6IGVuY29kaW5nTGVuZ3RoKGxlbmd0aCkgKyAxLFxuXHRcdH07XG5cdH1cblxuXHRwcml2YXRlIGdldFBheWxvYWQoaGVhZGVyOiBJSGVhZGVyLCBkYXRhOiBCdWZmZXIpIHtcblx0XHRyZXR1cm4gZGF0YS5zbGljZShoZWFkZXIub2Zmc2V0LCBkYXRhLmxlbmd0aCk7XG5cdH1cblxuXHRwcml2YXRlIGRlY29kZUhhbmRzaGFrZShidWZmZXI6IEJ1ZmZlcik6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcblx0XHRjb25zdCBsZW5ndGggPSBkZWNvZGUoYnVmZmVyKTtcblx0XHRjb25zdCBkYXRhID0gYnVmZmVyLnNsaWNlKGVuY29kaW5nTGVuZ3RoKGxlbmd0aCksIGVuY29kaW5nTGVuZ3RoKGxlbmd0aCkgKyBsZW5ndGgpO1xuXHRcdHJldHVybiBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSk7XG5cdH1cblxuXHRwcml2YXRlIGRlY29kZVBvbmcoZGF0YTogQnVmZmVyKTogbnVtYmVyIHtcblx0XHRjb25zdCBwb25nRGF0YSA9IGRhdGEucmVhZEJpZ1VJbnQ2NEJFKDApO1xuXHRcdHJldHVybiBOdW1iZXIoQmlnSW50KERhdGUubm93KCkpIC0gcG9uZ0RhdGEpO1xuXHR9XG59XG4iXX0=