"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ping = exports.pingUri = void 0;
const dns_1 = require("dns");
const net_1 = require("net");
const varint_1 = require("varint");
const PacketDecoder_1 = require("./PacketDecoder");
const PROTOCOL_VERSION = 736; // Minecraft 1.16.1
/**
 * ping with URI
 * @param {string} uri minecraft://server[:port]
 * @return {Promise<IMinecraftData>}
 */
function pingUri(uri, options = {}) {
    const { protocol, hostname, port } = new URL(uri);
    if (!hostname || !protocol || protocol !== 'minecraft:') {
        throw new TypeError('not correct minecraft URI');
    }
    return ping(hostname, port ? parseInt(port, 10) : undefined, options);
}
exports.pingUri = pingUri;
/**
 * ping with hostname and port
 * @param {string=} hostname hostname
 * @param {number=} port port number (defaults 25565)
 * @returns {Promise<IMinecraftData>}
 */
async function ping(hostname = 'localhost', port = 25565, options = {}) {
    let address = { hostname, port };
    try {
        address = await checkSrvRecord(address.hostname);
    }
    catch (err) {
        // ignore
    }
    return openConnection(address, options);
}
exports.ping = ping;
function checkSrvRecord(hostname) {
    return new Promise((resolve, reject) => {
        if ((0, net_1.isIP)(hostname) !== 0) {
            reject(new Error('Hostname is an IP address'));
        }
        else {
            (0, dns_1.resolveSrv)('_minecraft._tcp.' + hostname, (error, result) => {
                if (error) {
                    reject(error);
                }
                else {
                    if (result.length === 0 || !result[0]) {
                        reject(new Error('dns: no srv found with name'));
                    }
                    else {
                        resolve({
                            hostname: result[0].name,
                            port: result[0].port,
                        });
                    }
                }
            });
        }
    });
}
function openConnection(address, options) {
    let timeout;
    return new Promise((resolve, reject) => {
        const socket = (0, net_1.createConnection)(address.port, address.hostname, async () => {
            const packetDecoder = new PacketDecoder_1.PacketDecoder();
            socket.pipe(packetDecoder);
            packetDecoder.once('error', (error) => {
                socket.destroy();
                if (timeout) {
                    clearTimeout(timeout);
                }
                reject(error);
            });
            // handshake
            socket.write(createHandshakePacket(address));
            const handshakeData = await packetDecoder.oncePromise('handshake');
            // ping
            socket.write(createPingPacket(BigInt(Date.now())));
            const pingData = await packetDecoder.oncePromise('pong');
            if (timeout) {
                clearTimeout(timeout);
            }
            socket.end();
            resolve({
                ...handshakeData,
                ping: pingData,
            });
        });
        // Destroy on error
        socket.once('error', (error) => {
            socket.destroy();
            if (timeout) {
                clearTimeout(timeout);
            }
            reject(error);
        });
        // Destroy on timeout
        socket.once('timeout', () => {
            socket.destroy();
            if (timeout) {
                clearTimeout(timeout);
            }
            reject(new Error('Timed out'));
        });
        // Packet timeout
        const timeoutValue = (options === null || options === void 0 ? void 0 : options.timeout) || 10000;
        timeout = setTimeout(() => {
            socket.end();
            reject(new Error(`Timed out (${timeoutValue} ms)`));
        }, timeoutValue);
    });
}
function createHandshakePacket(address) {
    const portBuffer = Buffer.allocUnsafe(2);
    portBuffer.writeUInt16BE(address.port, 0);
    // Return hansdhake packet with request packet
    return Buffer.concat([
        createPacket(0, Buffer.concat([
            Buffer.from((0, varint_1.encode)(PROTOCOL_VERSION)),
            Buffer.from((0, varint_1.encode)(address.hostname.length)),
            Buffer.from(address.hostname, 'utf8'),
            portBuffer,
            Buffer.from((0, varint_1.encode)(1)),
        ])),
        createPacket(0, Buffer.alloc(0)),
    ]);
}
function createPingPacket(timestamp) {
    const pingBuffer = Buffer.allocUnsafe(8);
    pingBuffer.writeBigUInt64BE(timestamp);
    return createPacket(1, pingBuffer);
}
function createPacket(packetId, data) {
    return Buffer.concat([Buffer.from((0, varint_1.encode)((0, varint_1.encodingLength)(packetId) + data.length)), Buffer.from((0, varint_1.encode)(packetId)), data]);
}
//# sourceMappingURL=data:application/json;base64,